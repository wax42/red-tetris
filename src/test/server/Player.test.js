import Player from "../../server/Player";
import Room from "../../server/Room";
import _ from "lodash";

const gridInit = [
  [".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
  [".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
  [".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
  [".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
  [".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
  [".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
  [".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
  [".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
  [".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
  [".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
  [".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
  [".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
  [".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
  [".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
  [".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
  [".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
  [".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
  [".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
  [".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
  [".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
  [".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
  [".", ".", ".", "1", ".", ".", ".", ".", ".", "."],
  [".", ".", ".", "1", "1", ".", ".", ".", ".", "."],
  [".", ".", ".", ".", "1", ".", ".", ".", ".", "."]
];

const gridSpectrum = [
  [".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
  [".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
  [".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
  [".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
  [".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
  [".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
  [".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
  [".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
  [".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
  [".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
  [".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
  [".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
  [".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
  [".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
  [".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
  [".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
  [".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
  [".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
  [".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
  [".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
  [".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
  [".", ".", ".", "9", ".", ".", ".", ".", ".", "."],
  [".", ".", ".", "9", "9", ".", ".", ".", ".", "."],
  [".", ".", ".", "9", "9", ".", ".", ".", ".", "."]
];

describe("SERVER/PLAYER.JS - ", () => {
  const name = "player1";
  //   const room = "room";
  const spectrum = {
    playerName: name,
    score: 0,
    grid: _.cloneDeep(gridInit),
    lose: false
  };
  const mock = jest.fn();
  mock.mockReturnValue(spectrum);

  const on = (e, cb) => {
    mock();
  };

  const players = ["player1", "player2"];

  const optionsGames = {
    invisibilityMode: false,
    spectrumMode: false
  };

  it("should generate the spectrum", () => {
    const clientSocket = {
      id: "123",
      on,
      join: jest.fn(),
      leave: jest.fn(),
      emit: jest.fn(),
      to: () => {
        return {
          emit: jest.fn()
        };
      }
    };
    const room = new Room("room", name, clientSocket);
    room.newGame(players, optionsGames);
    const player = new Player(name, room, clientSocket);
    player.grid = _.cloneDeep(gridInit);
    const spectrum = {
      playerName: name,
      score: 0,
      lose: false,
      grid: _.cloneDeep(gridSpectrum)
    };
    expect(player.generateSpectrum(gridInit)).toEqual(spectrum);
  });

  /* it("should create listener", () => {
    const cb = jest.fn();
    const on = (eventsocket, callbackClient) => {
      //   console.log("YOOOO");
      //   console.log(callbackClient);
      cb();
    };
    const clientSocket = {
      id: "123",
      on,
      join: jest.fn(),
      leave: jest.fn(),
      emit: jest.fn()
    };
    const room = new Room("room", name, clientSocket);
    const player = new Player(name, room, clientSocket);
    player.room = {};
    expect(cb).toHaveBeenCalled();
  }); */
});
